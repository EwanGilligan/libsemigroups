##############################################################################
# Automake configuration
##############################################################################

AM_CXXFLAGS =  -I$(top_srcdir)/include
AM_CXXFLAGS += -I$(top_srcdir)/extern/HPCombi/include
AM_CXXFLAGS += -I$(top_srcdir)/extern/HPCombi/include/fallback
AM_CXXFLAGS += -I$(top_srcdir)/extern/sparsehash-c11
AM_CXXFLAGS += -mavx -flax-vector-conversions
AM_CXXFLAGS += -std=gnu++11 -g -O3 -march=native -Wall -Wextra
AM_CXXFLAGS += $(WARNING_CXXFLAGS)

AM_LDFLAGS  =  -no-undefined

if LIBSEMIGROUPS_DEBUG
AM_CPPFLAGS = -DDEBUG
AM_CXXFLAGS += -g3 -O0 -fno-omit-frame-pointer 
else
AM_CPPFLAGS = -DNDEBUG
endif

if HPCOMBI_CONSTEXPR_FUN_ARGS
AM_CPPFLAGS += -DHPCOMBI_CONSTEXPR_FUN_ARGS
endif

ACLOCAL_AMFLAGS	= -I m4

## We include libsemigroups-config.hpp in the distribution even though it is
## autogenerated by configure, for use with, for example, libsemigroups_cppyy

## libsemigroups headers
pkginclude_HEADERS =  include/adapters.hpp
pkginclude_HEADERS += include/blocks.hpp
pkginclude_HEADERS += include/bmat8.hpp
pkginclude_HEADERS += include/cong-base.hpp
pkginclude_HEADERS += include/cong-pair-impl.hpp
pkginclude_HEADERS += include/cong-pair.hpp
pkginclude_HEADERS += include/cong.hpp
pkginclude_HEADERS += include/constants.hpp
pkginclude_HEADERS += include/containers.hpp
pkginclude_HEADERS += include/element.hpp
pkginclude_HEADERS += include/forest.hpp
pkginclude_HEADERS += include/fpsemi-base.hpp
pkginclude_HEADERS += include/fpsemi.hpp
pkginclude_HEADERS += include/froidure-pin-base.hpp
pkginclude_HEADERS += include/froidure-pin-impl.hpp
pkginclude_HEADERS += include/froidure-pin.hpp
pkginclude_HEADERS += include/hpcombi.hpp
pkginclude_HEADERS += include/iterator.hpp
pkginclude_HEADERS += include/kbe.hpp
pkginclude_HEADERS += include/knuth-bendix.hpp
pkginclude_HEADERS += include/libsemigroups-config.hpp
pkginclude_HEADERS += include/libsemigroups-debug.hpp
pkginclude_HEADERS += include/libsemigroups-exception.hpp
pkginclude_HEADERS += include/libsemigroups.hpp
pkginclude_HEADERS += include/obvinf.hpp
pkginclude_HEADERS += include/race.hpp
pkginclude_HEADERS += include/range.hpp
pkginclude_HEADERS += include/reduct.hpp
pkginclude_HEADERS += include/report.hpp
pkginclude_HEADERS += include/runner.hpp
pkginclude_HEADERS += include/schreier-sims.hpp
pkginclude_HEADERS += include/semiring.hpp
pkginclude_HEADERS += include/stl.hpp
pkginclude_HEADERS += include/string.hpp
pkginclude_HEADERS += include/tce.hpp
pkginclude_HEADERS += include/timer.hpp
pkginclude_HEADERS += include/todd-coxeter.hpp
pkginclude_HEADERS += include/traits.hpp
pkginclude_HEADERS += include/types.hpp
pkginclude_HEADERS += include/uf.hpp
pkginclude_HEADERS += include/wrap.hpp

if LIBSEMIGROUPS_HPCOMBI
pkginclude_HEADERS += extern/HPCombi/include/hpcombi.hpp
pkginclude_HEADERS += extern/HPCombi/include/perm16.hpp
pkginclude_HEADERS += extern/HPCombi/include/perm16_impl.hpp
pkginclude_HEADERS += extern/HPCombi/include/power.hpp
pkginclude_HEADERS += extern/HPCombi/include/fallback/gcdlcm.hpp
pkginclude_HEADERS += extern/HPCombi/include/fallback/seq.hpp
endif

lib_LTLIBRARIES = libsemigroups.la

## libsemigroups sources
libsemigroups_la_SOURCES =  src/blocks.cpp
libsemigroups_la_SOURCES += src/bmat8.cpp
libsemigroups_la_SOURCES += src/cong-base.cpp
libsemigroups_la_SOURCES += src/cong-pair.cpp
libsemigroups_la_SOURCES += src/cong.cpp
libsemigroups_la_SOURCES += src/element.cpp
libsemigroups_la_SOURCES += src/fpsemi-base.cpp
libsemigroups_la_SOURCES += src/fpsemi.cpp
libsemigroups_la_SOURCES += src/froidure-pin-base.cpp
libsemigroups_la_SOURCES += src/knuth-bendix.cpp
libsemigroups_la_SOURCES += src/race.cpp
libsemigroups_la_SOURCES += src/reduct.cpp
libsemigroups_la_SOURCES += src/report.cpp
libsemigroups_la_SOURCES += src/runner.cpp
libsemigroups_la_SOURCES += src/semiring.cpp
libsemigroups_la_SOURCES += src/tce.cpp
libsemigroups_la_SOURCES += src/todd-coxeter.cpp
libsemigroups_la_SOURCES += src/uf.cpp

libsemigroups_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
libsemigroups_la_CFLAGS   = $(AM_CFLAGS)   $(CODE_COVERAGE_CFLAGS)
libsemigroups_la_CXXFLAGS = $(AM_CXXFLAGS) $(CODE_COVERAGE_CXXFLAGS)

libsemigroups_la_LIBS = $(AM_LDFLAGS) $(CODE_COVERAGE_LIBS)

## Extra files for the distribution

LINT_FORMAT_FILES_EXTRA =  src/kbe-impl.hpp 
LINT_FORMAT_FILES_EXTRA += src/knuth-bendix-impl.hpp 
LINT_FORMAT_FILES_EXTRA += tests/libsemigroups.tests.hpp

EXTRA_DIST =  $(LINT_FORMAT_FILES_EXTRA)
EXTRA_DIST += tests/catch.hpp
EXTRA_DIST += README.md LICENSE CPPLINT.cfg .clang-format Doxyfile
EXTRA_DIST += VERSION extern/HPCombi/VERSION

## The following are not included in the distro
BENCHMARK_LINT_FORMAT =  benchmark/src/bmat8.bm.cpp
BENCHMARK_LINT_FORMAT += benchmark/src/cong.bm.cpp
BENCHMARK_LINT_FORMAT += benchmark/src/examples.hpp
BENCHMARK_LINT_FORMAT += benchmark/src/nridempotents.bm.cpp
BENCHMARK_LINT_FORMAT += benchmark/src/semigroups.bm.cpp

## lstest sources

CHECK_LOG_DIR = tests/log
if LIBSEMIGROUPS_ASAN
CHECK_PROG    = ASAN_OPTIONS=detect_leaks=1 ./lstest$(EXEEXT)
else
CHECK_PROG    = ./lstest$(EXEEXT)
endif
CHECK_FLAGS1  = --use-colour yes --order lex --abort
CHECK_FLAGS2  = [quick]

check_PROGRAMS = lstest

lstest_SOURCES =  tests/blocks.test.cpp
lstest_SOURCES += tests/bmat8.test.cpp
lstest_SOURCES += tests/cong-pair.test.cpp
lstest_SOURCES += tests/cong.test.cpp
lstest_SOURCES += tests/constants.test.cpp # TODO this file is empty
lstest_SOURCES += tests/containers.test.cpp
lstest_SOURCES += tests/element.test.cpp
lstest_SOURCES += tests/forest.test.cpp
lstest_SOURCES += tests/fpsemi-examples.cpp
lstest_SOURCES += tests/fpsemi.test.cpp
lstest_SOURCES += tests/froidure-pin.bipart.test.cpp
lstest_SOURCES += tests/froidure-pin.bmat8.test.cpp
lstest_SOURCES += tests/froidure-pin.boolmat.test.cpp
lstest_SOURCES += tests/froidure-pin.element.test.cpp
lstest_SOURCES += tests/froidure-pin.integers.test.cpp
lstest_SOURCES += tests/froidure-pin.intmat.test.cpp
lstest_SOURCES += tests/froidure-pin.intpairs.test.cpp
lstest_SOURCES += tests/froidure-pin.pbr.test.cpp
lstest_SOURCES += tests/froidure-pin.pperm.test.cpp
lstest_SOURCES += tests/froidure-pin.projmaxplus.test.cpp
lstest_SOURCES += tests/froidure-pin.transf.test.cpp
lstest_SOURCES += tests/froidure-pin.tropmaxplus.test.cpp
lstest_SOURCES += tests/hpcombi.test.cpp
lstest_SOURCES += tests/kbe.test.cpp
lstest_SOURCES += tests/knuth-bendix.test.cpp
lstest_SOURCES += tests/main.test.cpp
lstest_SOURCES += tests/race.test.cpp
lstest_SOURCES += tests/runner.test.cpp
lstest_SOURCES += tests/schreier-sims.test.cpp
lstest_SOURCES += tests/semiring.test.cpp
lstest_SOURCES += tests/timer.test.cpp
lstest_SOURCES += tests/todd-coxeter.test.cpp
lstest_SOURCES += tests/uf.test.cpp

lstest_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
lstest_CFLAGS   = $(AM_CFLAGS)   $(CODE_COVERAGE_CFLAGS)
lstest_CXXFLAGS = $(AM_CXXFLAGS) $(CODE_COVERAGE_CXXFLAGS)
if LIBSEMIGROUPS_ASAN
lstest_CXXFLAGS += -fno-omit-frame-pointer -fsanitize=address
endif
if LIBSEMIGROUPS_UBSAN
lstest_CXXFLAGS += -fsanitize=undefined
endif
if LIBSEMIGROUPS_TSAN
lstest_CXXFLAGS += -fsanitize=thread
endif
## Not currently supported on Mac OSX
## lstest_CXXFLAGS += -fsanitize=memory -fPIE -pie

lstest_LIBS = $(AM_LDFLAGS) $(CODE_COVERAGE_LIBS)
lstest_LDADD = libsemigroups.la

## Make targets

@CODE_COVERAGE_RULES@

all-local: libsemigroups.la
if LIBSEMIGROUPS_DEBUG
	@echo "********************************************************************"
	@echo "************************ Debug mode enabled ************************"
	@echo "********************************************************************"
endif

clean-local-check:
	rm -rf $(check_PROGRAMS)
	rm -rf benchmark/src/build
	rm -f benchmark/gbench/*.pyc
	rm -f benchmark/gbench/__py_cache__/*.pyc
.PHONY: clean-local-check

distclean-local: distclean-local-check
	rm -f include/libsemigroups-config.hpp
.PHONY: distclean-local-check

superclean: distclean
	git clean -xdf --exclude *.swp --exclude *.swo
.PHONY: superclean

check:
	$(CHECK_PROG) $(CHECK_FLAGS1) $(CHECK_FLAGS2)

check-standard: CHECK_FLAGS2 = [quick],[standard]
check-standard: check

check-all: CHECK_FLAGS2 =
check-all: check
.PHONY: check-quick, check-all

format:
	@echo "Running clang-format . . .";
	@clang-format -i --verbose $(pkginclude_HEADERS) $(libsemigroups_la_SOURCES)
	@clang-format -i --verbose $(lstest_SOURCES) $(LINT_FORMAT_FILES_EXTRA)
	@clang-format -i --verbose $(BENCHMARK_LINT_FORMAT)

lint:
	@echo "Running cpplint . . .";
	@cpplint $(pkginclude_HEADERS) $(libsemigroups_la_SOURCES)
	@cpplint $(lstest_SOURCES) $(LINT_FORMAT_FILES_EXTRA)
	@cpplint $(BENCHMARK_LINT_FORMAT)

doc:
	@echo "Generating documentation . . ."; \
	doxygen Doxyfile
	@echo "See: html/index.html";
